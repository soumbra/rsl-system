name: 🚀 RSL System CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  POSTGRES_DB: rsl_system_test
  POSTGRES_USER: rsl_user
  POSTGRES_PASSWORD: test_password

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: ☕ Setup Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'eclipse-temurin'
        cache: maven

    - name: 📦 Setup Node 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 🧪 Test Backend
      run: |
        cd backend
        ./mvnw clean test
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/${{ env.POSTGRES_DB }}
        SPRING_DATASOURCE_USERNAME: ${{ env.POSTGRES_USER }}
        SPRING_DATASOURCE_PASSWORD: ${{ env.POSTGRES_PASSWORD }}

    - name: 🔨 Build Frontend
      run: |
        cd frontend
        npm ci
        npm run build

    - name: 🐳 Test Docker Stack
      run: |
        docker-compose up -d --build
        echo "⏳ Aguardando serviços inicializarem..."
        sleep 45
        echo "🧪 Testando backend health check..."
        curl -f http://localhost:8080/api/health || exit 1
        echo "🧪 Testando frontend..."
        curl -f http://localhost:5173 || exit 1
        echo "✅ Docker stack funcionando!"
        docker-compose down -v
