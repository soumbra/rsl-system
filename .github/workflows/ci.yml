name: 🚀 RSL System CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  POSTGRES_DB: rsl_system_test
  POSTGRES_USER: rsl_user
  POSTGRES_PASSWORD: test_password
  POSTGRES_PORT: 5432
  BACKEND_PORT: 8080
  FRONTEND_PORT: 5173
  SPRING_PROFILE: dev

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U rsl_user -d rsl_system_test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ☕ Setup Java 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: maven

      - name: 📦 Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: ⏳ Esperar PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }}; do
            echo "Aguardando PostgreSQL iniciar..."
            sleep 2
          done
          echo "✅ PostgreSQL pronto!"

      - name: 🧪 Test Backend
        run: |
          cd backend
          ./mvnw clean test
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/${{ env.POSTGRES_DB }}
          SPRING_DATASOURCE_USERNAME: ${{ env.POSTGRES_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ env.POSTGRES_PASSWORD }}

      - name: 🔨 Build Frontend
        run: |
          cd frontend
          npm ci
          npm run build

      - name: 🐳 Test Docker Stack
        run: |
          echo "🚀 Iniciando Docker Stack..."
          docker compose up -d --build

          echo "⏳ Aguardando backend ficar pronto..."
          for i in {1..30}; do
            if wget -qO- http://localhost:8080/actuator/health 2>/dev/null | grep -q '"status":"UP"'; then
              echo "✅ Backend está pronto!"
              break
            fi
            echo "Tentativa $i/30 - aguardando backend..."
            sleep 5
          done

          if [ $i -eq 30 ]; then
            echo "❌ Backend não respondeu a tempo."
            echo "📋 Logs do backend:"
            docker compose logs backend
            exit 1
          fi

          echo "🧪 Testando endpoint customizado..."
          if wget -qO- http://localhost:8080/api/health 2>/dev/null | grep -q '"status"'; then
            echo "✅ API health funcionando!"
          else
            echo "⚠️ API health falhou (usando fallback actuator)"
          fi

          echo "🧪 Testando frontend..."
          if wget -qO- http://localhost:5173 >/dev/null 2>&1; then
            echo "✅ Frontend respondendo!"
          else
            echo "❌ Frontend não respondeu"
            echo "📋 Logs do frontend:"
            docker compose logs frontend
            exit 1
          fi

          echo "✅ Docker Stack funcionando!"

      - name: 🧽 Parar containers
        if: always()
        run: |
          echo "🧹 Limpando Docker Stack..."
          docker compose down -v
